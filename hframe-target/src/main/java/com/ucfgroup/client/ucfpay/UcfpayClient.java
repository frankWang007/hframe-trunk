package com.ucfgroup.client.ucfpay;

import java.util.*;
import com.hframework.common.util.protocol.HttpClient;
import com.hframework.common.util.UrlHelper;
import java.text.MessageFormat;
import com.hframework.common.util.message.*;
import com.ucfgroup.client.ucfpay.bean.*;
import com.hframework.common.util.FileUtils;

/**
 * generated by hframework on 2016-04-27.
 */
public class UcfpayClient   {

	
	public static UcfPayResult createOrder(String merchantNo, String payerId, long amount, String certificateNo, String accountNo, String accountName, String mobileNo, String productName, String productInfo, String memo)  throws Exception{
			Map<String, String> parameterMap = new LinkedHashMap();
			parameterMap.put("service" ,"REQ_PAY_QUICK_APPLY");
			parameterMap.put("expireTime" ,UcfpayHelper.getOrderExpiredTime());
			parameterMap.put("noticeUrl" ,UcfpayConfig.getInstance().getOrderNoticeUrl());
			parameterMap.put("transCur" ,UcfpayConfig.getInstance().getTransCur());
			parameterMap.put("certificateType" ,UcfpayConfig.getInstance().getCertificateType());
			parameterMap.put("merchantNo" ,merchantNo);
			parameterMap.put("payerId" ,payerId);
			parameterMap.put("amount" ,String.valueOf(amount));
			parameterMap.put("certificateNo" ,certificateNo);
			parameterMap.put("accountNo" ,accountNo);
			parameterMap.put("accountName" ,accountName);
			parameterMap.put("mobileNo" ,mobileNo);
			parameterMap.put("productName" ,productName);
			parameterMap.put("productInfo" ,productInfo);
			parameterMap.put("memo" ,memo);
			parameterMap.put("secId" ,UcfpayConfig.getInstance().getSecId());
			parameterMap.put("version" ,UcfpayConfig.getInstance().getVersion());
			parameterMap.put("merchantId" ,UcfpayConfig.getInstance().getMerchantId());
			parameterMap.put("reqSn" ,UcfpayHelper.getReqSn(parameterMap));
			parameterMap.put("sign" ,UcfpayHelper.encryptSign(parameterMap));
			String url = UrlHelper.getUrlPath(UcfpayConfig.getInstance().getCreateOrder());
			String result;
			if("true".equals(UcfpayConfig.getInstance().getTestModel())) {
			   result = FileUtils.readFile(Thread.currentThread().getContextClassLoader().getResource(
			          "third/ucfpay/createOrder.response").getPath());
			}else {
			   result = HttpClient.doPost(url,parameterMap);
			}
			UcfPayResult responseData = JsonUtils.readValue(result,UcfPayResult.class);
			return responseData.convert();
	}

	
	public static UcfPayResult confirmOrder(String merchantNo, String checkCode)  throws Exception{
			Map<String, String> parameterMap = new LinkedHashMap();
			parameterMap.put("service" ,"REQ_PAY_QUICK_CONFIRM");
			parameterMap.put("merchantNo" ,merchantNo);
			parameterMap.put("checkCode" ,checkCode);
			parameterMap.put("secId" ,UcfpayConfig.getInstance().getSecId());
			parameterMap.put("version" ,UcfpayConfig.getInstance().getVersion());
			parameterMap.put("merchantId" ,UcfpayConfig.getInstance().getMerchantId());
			parameterMap.put("reqSn" ,UcfpayHelper.getReqSn(parameterMap));
			parameterMap.put("sign" ,UcfpayHelper.encryptSign(parameterMap));
			String url = UrlHelper.getUrlPath(UcfpayConfig.getInstance().getConfirmOrder());
			String result;
			if("true".equals(UcfpayConfig.getInstance().getTestModel())) {
			   result = FileUtils.readFile(Thread.currentThread().getContextClassLoader().getResource(
			          "third/ucfpay/confirmOrder.response").getPath());
			}else {
			   result = HttpClient.doPost(url,parameterMap);
			}
			UcfPayResult responseData = JsonUtils.readValue(result,UcfPayResult.class);
			return responseData.convert();
	}

	
	public static UcfPayResult resendSms(String merchantNo)  throws Exception{
			Map<String, String> parameterMap = new LinkedHashMap();
			parameterMap.put("service" ,"REQ_PAY_QUICK_RESEND");
			parameterMap.put("merchantNo" ,merchantNo);
			parameterMap.put("secId" ,UcfpayConfig.getInstance().getSecId());
			parameterMap.put("version" ,UcfpayConfig.getInstance().getVersion());
			parameterMap.put("merchantId" ,UcfpayConfig.getInstance().getMerchantId());
			parameterMap.put("reqSn" ,UcfpayHelper.getReqSn(parameterMap));
			parameterMap.put("sign" ,UcfpayHelper.encryptSign(parameterMap));
			String url = UrlHelper.getUrlPath(UcfpayConfig.getInstance().getResendSms());
			String result;
			if("true".equals(UcfpayConfig.getInstance().getTestModel())) {
			   result = FileUtils.readFile(Thread.currentThread().getContextClassLoader().getResource(
			          "third/ucfpay/resendSms.response").getPath());
			}else {
			   result = HttpClient.doPost(url,parameterMap);
			}
			UcfPayResult responseData = JsonUtils.readValue(result,UcfPayResult.class);
			return responseData.convert();
	}

	
	public static UcfPayCardBinResult queryCardBin(String bankCardNo)  throws Exception{
			Map<String, String> parameterMap = new LinkedHashMap();
			parameterMap.put("secId" ,UcfpayConfig.getInstance().getSecId());
			parameterMap.put("version" ,UcfpayConfig.getInstance().getVersion());
			parameterMap.put("merchantId" ,UcfpayConfig.getInstance().getAuthPayMerchantId());
			parameterMap.put("reqSn" ,UcfpayHelper.getReqSn(parameterMap));
			parameterMap.put("service" ,"MOBILE_CERTPAY_OUT_QUERY_CARD_BIN");
			parameterMap.put("bankCardNo" ,bankCardNo);
			parameterMap.put("sign" ,UcfpayHelper.authPayEncryptSign(parameterMap));
			String url = UrlHelper.getUrlPath(UcfpayConfig.getInstance().getQueryCardBin());
			String result;
			if("true".equals(UcfpayConfig.getInstance().getTestModel())) {
			   result = FileUtils.readFile(Thread.currentThread().getContextClassLoader().getResource(
			          "third/ucfpay/queryCardBin.response").getPath());
			}else {
			   result = HttpClient.doPost(url,parameterMap);
			}
			UcfPayCardBinResult responseData = JsonUtils.readValue(result,UcfPayCardBinResult.class);
			return responseData.convert();
	}

	
	public static UcfPayResult queryOrder(String merchantNo)  throws Exception{
			Map<String, String> parameterMap = new LinkedHashMap();
			parameterMap.put("service" ,"REQ_QUICK_QUERY_BY_ID");
			parameterMap.put("merchantNo" ,merchantNo);
			parameterMap.put("secId" ,UcfpayConfig.getInstance().getSecId());
			parameterMap.put("version" ,UcfpayConfig.getInstance().getVersion());
			parameterMap.put("merchantId" ,UcfpayConfig.getInstance().getMerchantId());
			parameterMap.put("reqSn" ,UcfpayHelper.getReqSn(parameterMap));
			parameterMap.put("sign" ,UcfpayHelper.encryptSign(parameterMap));
			String url = UrlHelper.getUrlPath(UcfpayConfig.getInstance().getQueryOrder());
			String result;
			if("true".equals(UcfpayConfig.getInstance().getTestModel())) {
			   result = FileUtils.readFile(Thread.currentThread().getContextClassLoader().getResource(
			          "third/ucfpay/queryOrder.response").getPath());
			}else {
			   result = HttpClient.doPost(url,parameterMap);
			}
			UcfPayResult responseData = JsonUtils.readValue(result,UcfPayResult.class);
			return responseData.convert();
	}

  
 
}
