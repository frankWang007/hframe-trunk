package com.ucfgroup.client.ucfpay;

import com.hframework.common.helper.Rules;
import com.hframework.common.util.DateUtils;
import com.hframework.common.util.security.*;
import com.ucf.sdk.UcfForOnline;
import com.ucf.sdk.util.UnRepeatCodeGenerator;

import java.util.Date;
import java.util.Map;
import java.util.UUID;

/**
 * generated by hframework on 2016-04-27.
 */
public class UcfpayHelper   {


	public static String getReqSn(Object object)  throws Exception{
		Map map = (Map) object;
		return UnRepeatCodeGenerator.createUnRepeatCode(UcfpayConfig.getInstance().getMerchantId(),
				(String)map.get("service"), (String)map.get("merchantNo"));
	}


	public static String getOrderExpiredTime()  throws Exception {
		return DateUtils.getDate(DateUtils.addDay(new Date(),
				Integer.parseInt(UcfpayConfig.getInstance().getOrderExpiredTime())), "yyyyMMddHHmmss");
	}


	public static String encryptSign(Object object)  throws Exception{
		System.out.println("param[0]:" + UcfpayConfig.getInstance().getSecKey());
		System.out.println("param[1]:" + "sign");
		System.out.println("param[2]:" + (Map) object);
		System.out.println("param[3]:" + UcfpayConfig.getInstance().getSecId());
		System.out.println("result:" + UcfForOnline.createSign(UcfpayConfig.getInstance().getSecKey(),
				"sign", (Map) object, UcfpayConfig.getInstance().getSecId()));
		return UcfForOnline.createSign(UcfpayConfig.getInstance().getSecKey(),
				"sign", (Map) object, UcfpayConfig.getInstance().getSecId());
	}

	public static String authPayEncryptSign(Object object)  throws Exception{
		System.out.println("param[0]:" + UcfpayConfig.getInstance().getAuthPaySecKey());
		System.out.println("param[1]:" + "sign");
		System.out.println("param[2]:" + (Map) object);
		System.out.println("param[3]:" + UcfpayConfig.getInstance().getSecId());
		System.out.println("result:" + UcfForOnline.createSign(UcfpayConfig.getInstance().getAuthPaySecKey(),
				"sign", (Map) object, UcfpayConfig.getInstance().getSecId()));
		return UcfForOnline.createSign(UcfpayConfig.getInstance().getAuthPaySecKey(),
				"sign", (Map) object, UcfpayConfig.getInstance().getSecId());
	}



	public static boolean decryptSign(Object object)  throws Exception{
		Map map = (Map) object;
		return UcfForOnline.verify(UcfpayConfig.getInstance().getSecKey(),
				"sign", (String)map.get("sign"),map,UcfpayConfig.getInstance().getSecId());
	}



}
